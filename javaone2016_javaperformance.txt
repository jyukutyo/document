Title (limit 80 characters)
書きたいこと）実際のアプリケーションに対して書籍"Java Performance"に沿って測定し、改善した話
書いてみた英文）First step of Java performance tuning : measurement and improvement of our web application using the book "Java Performance”

Abstract (limit 750 characters)
書きたいこと）
Javaではパフォーマンスチューニングをしなくても、たいてい問題なく動作します。私たちのWebアプリケーションでもとくに問題は起こっていませんでした。負荷の増大に対しては、サーバを増やすことで対応していました。そんなとき、"Java Performance"という書籍を手にしました。この本にはさまざまな観点でアプリケーションを測定する方法と、その改善案が書かれています。私は、ちょっとした興味から私たちが運営しているアプリケーションに対して、この本にある測定をしてみました。問題ないことも多くありましたが、いくつか驚くべきことも判明しました。このセッションでは、Javaアプリケーションに対して初めてパフォーマンスチューニングをしようと考えてる人向けに、アプリケーションに対して測定した内容とその結果、そして改善した内容とその結果を説明します。

書いてみた英文）
Java applications run well without performance tuning. Our web application was also running well. As we obtained more access to one's website, we added servers. At some time I got the book “Java Performance: The Definitive Guide”. It is written about measuring an application and improving it. I have measured out application with the book for personal interest. There was not a problem in most cases, but it turned out that we must to verify. This session is for beginners in performance tuning of Java applications, I talk about what I measured, the real measurement result and how to improve.

Presentation Summary - For evaluation only, this is an additional description of your proposal to help the reviewers better understand your submission. Text limit 3950 characters.
書きたいこと）
私たちが運営しているWebサイトは、会員が700万人以上、月間のページビュー数は1億以上、日本の15歳から18歳までの女性の70%以上が会員となっている人気のサイトです。これはJavaのWebアプリケーションとして動作しています。Webサーバとサーブレットコンテナは複数台あり、RDBMSにはOracle RACで複数のインスタンスがあります。それにもかかわらず、ローンチから最近まで、Javaアプリケーションに対してパフォーマンスを測定していませんでした。時期によってはアプリケーションの動作が重くなることがありましたが、あまり気にしていませんでした。何度かOutOfMemoryErrorが発生しましたが、ヒープダンプがあるにもかかわらず解析していませんでした。オライリーの書籍“Java Performance: The Definitive Guide”をきっかけに、パフォーマンスを測定しました。非効率なGCアルゴリズムを使っていたためにヒープの使用量が増えていること、フルGCに0.9秒かかっていることがわかりました。また、ヒープダンプを解析すると、あるライブラリにあるクラスのインスタンスがヒープの多くを占めていることがわかりました。GCアルゴリズムを変更すると、ヒープの使用量は減り、”Stop the World”する時間も短くなりました。ライブラリを変更すると、OutOfMemoryErrorが発生しなくなりました。このセッションで、私が実際に測定した項目とその結果データ、改善方法とその効果を話します。今までパフォーマンスチューニングをしたことがない人にとって、自分のアプリケーションに対してチューニングをするはじめの一歩となる内容を説明します。

書いてみた英文）
Our web site has seven million accounts. Monthly page views is more than one hundred million. More than seventy percent of mid-teen girls in Japan  have an account.  This site is Java web application. We have some web servers and servlet containers. We use Oracle RAC as RDBMS which has some instances. In despite of this scale, we have never tried to measure our Java application after launch. Sometimes it was heavy, but we didn’t care about it. Sometimes OutOfMemoryError occurred, but we didn’t analyze heap dump files. After I read the book “Java Performance: The Definitive Guide” published by O’Reilly, I measured Java performance. I realized that used heap size was increasing because of inefficient GC algorithm and full GC spend 0.9 second. I analyze heap dump file using Eclipse Memory Analyzer, Instances of certain library occupied most of heap. So I changed GC algorithm to CMS. Then used heap size was reduced and the time of “Stop the World” was shortened. I also change a version of the library, OutOfMemoryError had never happened. In this session, I will express the first stop of performance tuning, for example what I really measured , i the measurement result, how to improve and the improvement result,  for people who has never tuned performance of a Java web application.
